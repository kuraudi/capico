from pybit.unified_trading import HTTP
import redis
import redis.client
import requests
import json,time
from django.http import JsonResponse  # –ò—Å–ø–æ–ª—å–∑—É–µ–º JsonResponse –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ HTTP-–æ—Ç–≤–µ—Ç–æ–≤
from .models import Coin
from django.db.utils import IntegrityError
from dotenv import load_dotenv
from rest_framework.decorators import api_view
import os
import aiohttp

load_dotenv()
API_KEY = "6de2833e-d048-4b60-982b-4d7e17860376"
BYBIT_API_URL = "https://api.bybit.com/v5/market/tickers?category=spot"
CMC_MAP_URL = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/map"
CMC_INFO_URL = "https://pro-api.coinmarketcap.com/v2/cryptocurrency/info"

CMC_API_KEY = os.getenv('CMC_API_KEY')

# –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
session = HTTP(testnet=False)


BYBIT_API_URL = "https://api.bybit.com/v5/market/tickers"

CMC_URL = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/info"
HEADERS = {
    "Accepts": "application/json",
    "X-CMC_PRO_API_KEY": CMC_API_KEY,
}



def get_bybit_symbols(limit=20):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ —Å Bybit, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç—ã —Å "USDT" –∏ —É–±–∏—Ä–∞—è "USDT" –≤ –∫–æ–Ω—Ü–µ."""
    try:
        response = requests.get(BYBIT_API_URL)
        data = response.json()
        
        if data["retCode"] == 0:
            symbols = [coin["symbol"][:-4] for coin in data["result"]["list"] if coin["symbol"].endswith("USDT")]
            return symbols[:limit]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ 30 –º–æ–Ω–µ—Ç–∞–º–∏
        
        print("‚ùå –û—à–∏–±–∫–∞ API Bybit:", data["retMsg"])
    except requests.RequestException as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Bybit:", e)
    
    return []


def get_prices_from_bybit():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã –º–æ–Ω–µ—Ç —Å Bybit."""
    coins = Coin.objects.values_list("symbol", flat=True)
    symbols = list(coins)
    symbols = [i+'USDT' for i in symbols]
    response = session.get_tickers(category="spot", symbol=None)

    if "result" in response and "list" in response["result"]:
        tickers = response["result"]["list"]
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
        filtered_tickers = {
             t["symbol"].replace("USDT", ""): {
                "price": t["lastPrice"],
                "price24hPcnt": t["price24hPcnt"],
                "turnover24h": t["turnover24h"],
                "volume24h": t["volume24h"],
                "lowPrice24h": t["lowPrice24h"],
                "highPrice24h": t["highPrice24h"],
            } for t in tickers if t["symbol"] in symbols
        }
        if filtered_tickers:
            return filtered_tickers
    return {}

def get_coins_from_db():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    coins = Coin.objects.all().values("symbol", "name", "url_logo")  # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    return list(coins)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º QuerySet –≤ —Å–ø–∏—Å–æ–∫

def fetch_and_save_coins(symbols, delay=3):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö —Å CoinMarketCap –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    for symbol in symbols:
        params = {"symbol": symbol}
        
        try:
            print(f"üì° –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
            response = requests.get(CMC_URL, headers=HEADERS, params=params)
            response.raise_for_status()
            
            data = response.json()
            coin_data = data.get("data", {}).get(symbol.upper(), {})

            if coin_data:
                try:
                    Coin.objects.update_or_create(
                        symbol=coin_data.get("symbol", ""),
                        defaults={
                            "name": coin_data.get("name", ""),
                            "url_logo": coin_data.get("logo", ""),
                        },
                    )
                    print(f"‚úÖ –ú–æ–Ω–µ—Ç–∞ {symbol} –æ–±–Ω–æ–≤–ª–µ–Ω–∞/–¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É")
                except IntegrityError:
                    print(f"‚ö†Ô∏è –ú–æ–Ω–µ—Ç–∞ {symbol} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ")
                except Exception as e:
                    print(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ {symbol}: {e}")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")

        except requests.exceptions.RequestException as e:
            print(f"üö® –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {symbol}: {e}")

        time.sleep(delay)  # Rate limit
        
def get_top_30_coins():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç —Å Bybit –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 30 —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ 'USDT'."""
    response = session.get_tickers(category="spot")

    if "result" in response and "list" in response["result"]:
        tickers = response["result"]["list"]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ä—ã, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –Ω–∞ 'USDT'
        usdt_pairs = [t["symbol"] for t in tickers if t["symbol"].endswith("USDT")]

        # –û—Ç—Å–µ–∫–∞–µ–º 'USDT' –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 30 –º–æ–Ω–µ—Ç
        top_30 = [symbol[:-4] for symbol in usdt_pairs[:30]]

        return top_30

    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö —Å Bybit:", response)
    return []

@api_view(["POST"])
def get_orderbook_of_coin(request):
    coin_name = request.data['params']['symbol']
    
    response = session.get_orderbook(category="linear", symbol=coin_name)
    orderbook_buy = response['result']['b']
    orderbook_sell = response['result']['a']
    
    return JsonResponse({'orderbook_buy':orderbook_buy,'orderbook_sell':orderbook_sell},status=200)

@api_view(['POST'])
def get_orderbook_history(request):
    coin_name = request.data['params']['symbol']
    
    response = session.get_public_trade_history(
    category="spot",
    symbol=coin_name,
    limit=30,
)['result']['list']
    if len(response)!=0: 
        arr = [{'price':i['price'],'size':i['size'], 'side':i['side'],'time':i['time']} for i in response]
    else: return JsonResponse({'error':'No orders founded'},status=500)
    return JsonResponse({'orderbook_history':arr},status=200)
            
        

    
    