{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/askeroff/Desktop/vscode/exchange/frontend/src/app/components/UserContext.tsx"],"sourcesContent":["\"use client\"; // Контекст работает только на клиенте\r\n\r\nimport { createContext, useContext, useState } from \"react\";\r\n\r\ntype UserRole = \"admin\" | \"user\" | \"guest\";\r\n\r\ntype UserContextType = {\r\n  role: UserRole;\r\n  setRole: (role: UserRole) => void;\r\n};\r\n\r\nconst UserContext = createContext<UserContextType | undefined>(undefined);\r\n\r\n// Кастомный хук для удобного использования контекста\r\nexport const useUser = () => {\r\n  const context = useContext(UserContext);\r\n  if (!context) {\r\n    throw new Error(\"useUser must be used within a UserProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\n// Провайдер контекста\r\nexport const UserProvider = ({ children }: { children: React.ReactNode }) => {\r\n  const [role, setRole] = useState<UserRole>(\"guest\");\r\n\r\n  return (\r\n    <UserContext.Provider value={{ role, setRole }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n"],"names":[],"mappings":";;;;;AAEA;AAFA,cAAc,sCAAsC;;;AAWpD,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA+B;AAGxD,MAAM,UAAU;IACrB,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;AAGO,MAAM,eAAe,CAAC,EAAE,QAAQ,EAAiC;IACtE,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAY;IAE3C,qBACE,8OAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAM;QAAQ;kBAC1C;;;;;;AAGP"}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}