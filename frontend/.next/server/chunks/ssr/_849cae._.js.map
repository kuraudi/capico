{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/askeroff/Desktop/vscode/exchange/frontend/src/app/futures/page.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  createChart,\r\n  CandlestickSeries,\r\n  IChartApi,\r\n  UTCTimestamp,\r\n} from \"lightweight-charts\";\r\n\r\nconst CandlestickChart: React.FC = () => {\r\n  const chartContainerRef = useRef<HTMLDivElement>(null);\r\n  const chartRef = useRef<IChartApi | null>(null);\r\n  const candlestickSeriesRef = useRef<ReturnType<\r\n    IChartApi[\"addSeries\"]\r\n  > | null>(null);\r\n  const [candles, setCandles] = useState<any[]>([]);\r\n\r\n  useEffect(() => {\r\n    if (!chartContainerRef.current) return;\r\n\r\n    // Создаем график\r\n    const chart = createChart(chartContainerRef.current, {\r\n      layout: {\r\n        textColor: \"black\",\r\n        background: { color: \"white\" },\r\n      },\r\n      width: chartContainerRef.current.clientWidth,\r\n      height: 400,\r\n    });\r\n\r\n    chartRef.current = chart;\r\n\r\n    // Добавляем свечной график\r\n    const candlestickSeries = chart.addSeries(CandlestickSeries, {\r\n      upColor: \"#26a69a\",\r\n      downColor: \"#ef5350\",\r\n      borderVisible: false,\r\n      wickUpColor: \"#26a69a\",\r\n      wickDownColor: \"#ef5350\",\r\n    });\r\n\r\n    candlestickSeriesRef.current = candlestickSeries;\r\n\r\n    // Загружаем исторические свечи\r\n    fetch(\r\n      \"https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1m&limit=100\"\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        const loadedCandles = data.map((candle: any) => ({\r\n          time: (candle[0] / 1000) as UTCTimestamp,\r\n          open: parseFloat(candle[1]),\r\n          high: parseFloat(candle[2]),\r\n          low: parseFloat(candle[3]),\r\n          close: parseFloat(candle[4]),\r\n        }));\r\n\r\n        setCandles(loadedCandles);\r\n        candlestickSeries.setData(loadedCandles);\r\n        chart.timeScale().fitContent();\r\n      });\r\n\r\n    // Подключаемся к WebSocket Binance\r\n    const ws = new WebSocket(\r\n      \"wss://stream.binance.com:9443/ws/btcusdt@kline_1m\"\r\n    );\r\n\r\n    ws.onmessage = (event) => {\r\n      const message = JSON.parse(event.data);\r\n\r\n      if (message.k && candlestickSeriesRef.current) {\r\n        const newCandle = {\r\n          time: (message.k.t / 1000) as UTCTimestamp,\r\n          open: parseFloat(message.k.o),\r\n          high: parseFloat(message.k.h),\r\n          low: parseFloat(message.k.l),\r\n          close: parseFloat(message.k.c),\r\n        };\r\n\r\n        setCandles((prevCandles) => {\r\n          const lastCandle = prevCandles[prevCandles.length - 1];\r\n\r\n          if (lastCandle && lastCandle.time === newCandle.time) {\r\n            // Обновляем текущую свечу\r\n            const updatedCandles = [...prevCandles];\r\n            updatedCandles[updatedCandles.length - 1] = newCandle;\r\n            candlestickSeriesRef.current!.update(newCandle);\r\n            return updatedCandles;\r\n          } else {\r\n            // Добавляем новую свечу\r\n            const updatedCandles = [...prevCandles, newCandle];\r\n            candlestickSeriesRef.current!.setData(updatedCandles);\r\n            return updatedCandles;\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    return () => {\r\n      ws.close();\r\n      chart.remove();\r\n    };\r\n  }, []);\r\n\r\n  return <div ref={chartContainerRef} className=\"w-full h-[400px]\" />;\r\n};\r\n\r\nexport default CandlestickChart;\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAOA,MAAM,mBAA6B;IACjC,MAAM,oBAAoB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAkB;IACjD,MAAM,WAAW,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAoB;IAC1C,MAAM,uBAAuB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAExB;IACV,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAS,EAAE;IAEhD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,kBAAkB,OAAO,EAAE;QAEhC,iBAAiB;QACjB,MAAM,QAAQ,CAAA,GAAA,sLAAA,CAAA,cAAW,AAAD,EAAE,kBAAkB,OAAO,EAAE;YACnD,QAAQ;gBACN,WAAW;gBACX,YAAY;oBAAE,OAAO;gBAAQ;YAC/B;YACA,OAAO,kBAAkB,OAAO,CAAC,WAAW;YAC5C,QAAQ;QACV;QAEA,SAAS,OAAO,GAAG;QAEnB,2BAA2B;QAC3B,MAAM,oBAAoB,MAAM,SAAS,CAAC,sLAAA,CAAA,oBAAiB,EAAE;YAC3D,SAAS;YACT,WAAW;YACX,eAAe;YACf,aAAa;YACb,eAAe;QACjB;QAEA,qBAAqB,OAAO,GAAG;QAE/B,+BAA+B;QAC/B,MACE,8EAEC,IAAI,CAAC,CAAC,MAAQ,IAAI,IAAI,IACtB,IAAI,CAAC,CAAC;YACL,MAAM,gBAAgB,KAAK,GAAG,CAAC,CAAC,SAAgB,CAAC;oBAC/C,MAAO,MAAM,CAAC,EAAE,GAAG;oBACnB,MAAM,WAAW,MAAM,CAAC,EAAE;oBAC1B,MAAM,WAAW,MAAM,CAAC,EAAE;oBAC1B,KAAK,WAAW,MAAM,CAAC,EAAE;oBACzB,OAAO,WAAW,MAAM,CAAC,EAAE;gBAC7B,CAAC;YAED,WAAW;YACX,kBAAkB,OAAO,CAAC;YAC1B,MAAM,SAAS,GAAG,UAAU;QAC9B;QAEF,mCAAmC;QACnC,MAAM,KAAK,IAAI,UACb;QAGF,GAAG,SAAS,GAAG,CAAC;YACd,MAAM,UAAU,KAAK,KAAK,CAAC,MAAM,IAAI;YAErC,IAAI,QAAQ,CAAC,IAAI,qBAAqB,OAAO,EAAE;gBAC7C,MAAM,YAAY;oBAChB,MAAO,QAAQ,CAAC,CAAC,CAAC,GAAG;oBACrB,MAAM,WAAW,QAAQ,CAAC,CAAC,CAAC;oBAC5B,MAAM,WAAW,QAAQ,CAAC,CAAC,CAAC;oBAC5B,KAAK,WAAW,QAAQ,CAAC,CAAC,CAAC;oBAC3B,OAAO,WAAW,QAAQ,CAAC,CAAC,CAAC;gBAC/B;gBAEA,WAAW,CAAC;oBACV,MAAM,aAAa,WAAW,CAAC,YAAY,MAAM,GAAG,EAAE;oBAEtD,IAAI,cAAc,WAAW,IAAI,KAAK,UAAU,IAAI,EAAE;wBACpD,0BAA0B;wBAC1B,MAAM,iBAAiB;+BAAI;yBAAY;wBACvC,cAAc,CAAC,eAAe,MAAM,GAAG,EAAE,GAAG;wBAC5C,qBAAqB,OAAO,CAAE,MAAM,CAAC;wBACrC,OAAO;oBACT,OAAO;wBACL,wBAAwB;wBACxB,MAAM,iBAAiB;+BAAI;4BAAa;yBAAU;wBAClD,qBAAqB,OAAO,CAAE,OAAO,CAAC;wBACtC,OAAO;oBACT;gBACF;YACF;QACF;QAEA,OAAO;YACL,GAAG,KAAK;YACR,MAAM,MAAM;QACd;IACF,GAAG,EAAE;IAEL,qBAAO,8OAAC;QAAI,KAAK;QAAmB,WAAU;;;;;;AAChD;uCAEe"}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}