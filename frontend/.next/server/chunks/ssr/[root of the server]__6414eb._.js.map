{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/askeroff/Desktop/vscode/exchange/frontend/src/app/GlobalContext.tsx"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport type TypeCoinInfo = {\r\n  name: string;\r\n  url_logo: string;\r\n  price?: number;\r\n  price24hPcnt?: number;\r\n  turnover24h?: number;\r\n  volume24h?: number;\r\n  lowPrice24h?: number;\r\n  highPrice24h?: number;\r\n};\r\ntype CoinBalance = {\r\n  symbol: string;\r\n  name: string;\r\n  url_logo: string;\r\n  total_balance: number;\r\n  avaliable_balance: number;\r\n  reserved_balance: number;\r\n  breakeven_price: number;\r\n  total_pnl: number;\r\n};\r\n\r\ntype TypeCoinName = [string, { name: string; logo: string }];\r\ntype TypeTotalBalance = { totalBalanceUSD: number; totalBalanceBTC: number };\r\n\r\ninterface GlobalContextType {\r\n  role: string;\r\n  coinPrices: [string, TypeCoinInfo][];\r\n  userCoinsBalances: CoinBalance[]; // Массив массивов\r\n  setRole: (role: string) => void;\r\n  totalBalance: TypeTotalBalance;\r\n  userInfo: TypeUserInfo;\r\n}\r\ntype TypeUserInfo = {\r\n  email: string;\r\n};\r\n\r\nconst GlobalContext = createContext<GlobalContextType | undefined>(undefined);\r\n\r\nexport const RoleProvider = ({ children }: { children: React.ReactNode }) => {\r\n  const [role, setRole] = useState<string>(\"guest\");\r\n  const [userInfo, setUserInfo] = useState<TypeUserInfo>({\r\n    email: \"\",\r\n  });\r\n  const [coinPrices, setCoinPrices] = useState<[string, TypeCoinInfo][]>([]);\r\n  const [totalBalance, setTotalBalance] = useState<{\r\n    totalBalanceUSD: number;\r\n    totalBalanceBTC: number;\r\n  }>({ totalBalanceUSD: 0, totalBalanceBTC: 0 });\r\n\r\n  useEffect(() => {\r\n    const savedRole = localStorage.getItem(\"role\");\r\n    setRole(savedRole || \"guest\");\r\n    if (!savedRole) localStorage.setItem(\"role\", \"guest\");\r\n\r\n    // 📌 Загрузка списка монет из БД\r\n    const fetchCoins = async () => {\r\n      try {\r\n        const { data: coins } = await axios.get<TypeCoinName[]>(\r\n          \"http://127.0.0.1:8000/market\"\r\n        );\r\n\r\n        // const { data: metaInfo } = await axios.get(\r\n        //   \"http://127.0.0.1:8000/market/metainfo\"\r\n        // );\r\n\r\n        // 📌 Преобразуем данные в массив массивов\r\n        const updatedPrices: [string, TypeCoinInfo][] = coins.map((coin) => [\r\n          coin[0],\r\n          {\r\n            name: coin[1].name,\r\n            url_logo: coin[1].logo,\r\n            price: 0,\r\n            price24hPcnt: 0,\r\n            turnover24h: 0,\r\n            lowPrice24h: 0,\r\n            highPrice24h: 0,\r\n            volume24h: 0,\r\n          },\r\n        ]);\r\n        setCoinPrices(updatedPrices);\r\n      } catch (error) {\r\n        console.error(\"❌ Ошибка загрузки монет:\", error);\r\n      }\r\n    };\r\n\r\n    // 🔄 Функция для обновления цен из Redis\r\n    const updatePriceFromRedis = async () => {\r\n      try {\r\n        const { data: response } = await axios.get<\r\n          [string, Partial<TypeCoinInfo>][]\r\n        >(\"http://127.0.0.1:8000/market/prices\");\r\n\r\n        // console.log(\"💰 Обновленные цены:\", response);\r\n\r\n        setCoinPrices((prev) => {\r\n          const updated = prev.map(([symbol, coin]) => {\r\n            const found = response.find((el) => el[0] === symbol);\r\n            return [symbol, { ...coin, ...(found ? found[1] : {}) }] as [\r\n              string,\r\n              TypeCoinInfo\r\n            ]; // 🔥 Тут явно указываем тип\r\n          });\r\n\r\n          // 📌 Сортируем по цене (по убыванию)\r\n          return updated.sort((a, b) => (b[1].price ?? 0) - (a[1].price ?? 0));\r\n        });\r\n      } catch (error) {\r\n        console.error(\"❌ Ошибка загрузки цен из Redis:\", error);\r\n      }\r\n    };\r\n\r\n    fetchCoins();\r\n    updatePriceFromRedis();\r\n    const interval = setInterval(updatePriceFromRedis, 3000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const [userCoinsBalances, setUserCoinBalances] = useState<CoinBalance[]>([]);\r\n  useEffect(() => {\r\n    const fetchUserBalances = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          \"http://127.0.0.1:8000/market/user-balances\",\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n            },\r\n          }\r\n        );\r\n        console.log(response.data, \"ai\");\r\n\r\n        setUserCoinBalances(response.data);\r\n      } catch (error) {\r\n        console.error(\"Ошибка при получении баланса:\", error);\r\n      }\r\n    };\r\n    const fetchTotalBalance = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://127.0.0.1:8000/market/test\", {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"access\")}`,\r\n          },\r\n        });\r\n        setTotalBalance(() => ({\r\n          totalBalanceUSD: response.data.total_balance ?? 0,\r\n          totalBalanceBTC: response.data.total_balance_btc ?? 0,\r\n        }));\r\n      } catch (error) {\r\n        console.error(\"Ошибка при получении баланса:\", error);\r\n      }\r\n    };\r\n    // Вызов функции\r\n    fetchUserBalances();\r\n    fetchTotalBalance();\r\n    setUserInfo((prev) => ({\r\n      ...prev,\r\n      email: localStorage.getItem(\"email\") ?? \"\",\r\n    }));\r\n  }, []);\r\n\r\n  const updateRole = (newRole: string) => {\r\n    setRole(newRole);\r\n    localStorage.setItem(\"role\", newRole);\r\n  };\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        role,\r\n        setRole: updateRole,\r\n        coinPrices,\r\n        userCoinsBalances,\r\n        totalBalance,\r\n        userInfo,\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useGlobalContext = () => {\r\n  const context = useContext(GlobalContext);\r\n  if (!context) {\r\n    throw new Error(\"useRole must be used within a RoleProvider\");\r\n  }\r\n  return context;\r\n};\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 255, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 261, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/askeroff/Desktop/vscode/exchange/frontend/src/app/layout.tsx"],"sourcesContent":["\"use client\";\nimport \"./globals.css\";\nimport \"./resets.css\";\nimport { RoleProvider } from \"./GlobalContext\";\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <head></head>\n      <RoleProvider>\n        <body>{children}</body>\n      </RoleProvider>\n    </html>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AAHA;;;;;AAKe,SAAS,WAAW,EACjC,QAAQ,EAGR;IACA,qBACE,8OAAC;QAAK,MAAK;;0BACT,8OAAC;;;;;0BACD,8OAAC,4HAAA,CAAA,eAAY;0BACX,cAAA,8OAAC;8BAAM;;;;;;;;;;;;;;;;;AAIf"}},
    {"offset": {"line": 300, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}